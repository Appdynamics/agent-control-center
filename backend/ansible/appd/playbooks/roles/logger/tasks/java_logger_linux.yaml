---
- debug:
    msg: "Apply logger setting to Java agent on Linux"

# Check if we need to apply the logger settings. The check role
# updates the {{ apply_logger_settings }} variable
- include_tasks: check.yaml
  vars:
    logger_agent_dest_folder: "{{ java_agent_dest_folder_linux }}"

# Apply log setting to Linux hosts
- name: Set the log level for the Java agent on Linux
  become: false
  block:
  - debug:
      msg: "Requested log level = {{ agent_log_level }} - Logger = {{ agent_loggers }}"

  - name: Find the version specific directory name if it has not been set yet
    block:
    - name: Get the directory
      find:
        paths: "{{ java_agent_dest_folder_linux }}"
        patterns: "ver*"
        file_type: directory
      register: result

    - name: Set the version folder fact
      set_fact:
        java_agent_ver_folder: "{{ result.files[0].path }}" # "{{ ver.stdout | regex_replace ('\\r\\n', '') }}"
    when: java_agent_ver_folder is not defined

  - name: Create a local directory to manipulate the log4j file
    tempfile:
      state: directory
      suffix: build
    register: temp_dir
    changed_when: false

  # Rather than modifying the XML files in-situ on the remote server, we copy
  # them down and do the XML manipulation locally. This is done so we can
  # use the xml module without the need to install lxml or pip on the
  # target server.
  - name: Copy the log4j file down to update it localy ( which we do as not to require the lxml python library on the target )
    fetch:
      src: '{{ java_agent_ver_folder }}/conf/logging/log4j2.xml'
      dest: '{{ temp_dir.path }}/'
      mode: 0755
      flat: yes
    changed_when: false

  - name: Check which xpath entries are found in the log4j2 file
    xml:
      # path: '{{ java_agent_ver_folder }}/conf/logging/log4j2.xml'
      path: '{{ temp_dir.path }}/log4j2.xml'
      xpath: //AsyncLogger[@name='{{ item }}']
      count: yes
    register: hits
    delegate_to: localhost
    loop: "{{ agent_loggers }}"

  - name: Set the log level for the java agent
    xml:
      # path: '{{ java_agent_ver_folder }}/conf/logging/log4j2.xml'
      path: '{{ temp_dir.path }}/log4j2.xml'
      xpath: "{{ item.actions.xpath }}" #  //AsyncLogger[@name='{{ item }}']
      attribute: level
      value: "{{ agent_log_level }}"
    loop: "{{ hits.results }}" # "{{ agent_loggers }}"
    delegate_to: localhost
    when: item.count >= 1
    register: result
    changed_when: # only report changes if they are not part of installing the agent
      - logger_role_standalone
      - result.changed

  - name: Copy the local file back to the host
    become: true
    copy:
       src: '{{ temp_dir.path }}/log4j2.xml'
       dest: '{{ java_agent_ver_folder }}/conf/logging/'
    changed_when: false

  - name: Delete the temp directory
    file:
       path: "{{ temp_dir.path }}"
       state: absent
    delegate_to: localhost
    changed_when: false
  when: apply_logger_settings
